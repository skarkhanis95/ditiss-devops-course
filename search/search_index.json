{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome! This course blends real-world infrastructure and DevOps practice using a company simulation: TechOps Inc. You\u2019ll guide six teams (10 students each) through designing, building, automating, and operating production-like systems.</p> <p>How to use this site</p> <ul> <li>Start with Session 0 \u00b7 Agile &amp; Tools to set up Slack, Taiga, and plan the first sprint.  </li> <li>Then follow Phase 1 \u2192 Phase 5 in order.  </li> <li>Each session page includes: Objectives \u00b7 Theory summary \u00b7 Practical scenario \u00b7 Lab guide \u00b7 Checkpoints \u00b7 Quiz \u00b7 Deliverables \u00b7 Rubric.</li> </ul>"},{"location":"#what-students-will-build-end-to-end","title":"What students will build (end-to-end)","text":"<ul> <li>On\u2011prem lab with VMs, NAS and SAN storage</li> <li>AWS environment (EC2, S3/MinIO, VPC with public/private subnets)</li> <li>Containerized app (Docker) orchestrated on Kubernetes/Minikube</li> <li>Infrastructure as Code (Ansible/Terraform) for repeatable provisioning</li> <li>CI/CD pipeline (Jenkins or GitHub Actions) with automated builds &amp; deploys</li> <li>Monitoring &amp; logging (Prometheus + Grafana) with useful dashboards</li> <li>Security &amp; HA (IAM, secrets, hardened configs, load balancing/auto-scaling)</li> </ul>"},{"location":"#course-phases-syllabus-mapping","title":"Course phases &amp; syllabus mapping","text":"Phase Sessions Theme Key Deliverables Phase 0 0 Agile &amp; Tools Slack workspace, Taiga project, Sprint plan Phase 1 6\u20139 Infrastructure Foundations VM baseline, DC design, NAS, SAN Phase 2 10\u201313 Virtualization &amp; Cloud VM cluster, EC2, S3/MinIO, VPC Phase 3 14\u201317 DevOps Foundations DevOps roadmap, Dockerized app, K8s, IaC Phase 4 18\u201320 CI/CD &amp; Monitoring Jenkins/GitHub Actions, Prometheus+Grafana Phase 5 21\u201323 Security &amp; HA IAM/secrets, hardening, HA deployment, final demo <p>Full session list: see left navigation or jump to Phase 1 \u2192 S6 \u00b7 S7 \u00b7 S8 \u00b7 S9</p>"},{"location":"#tools-platforms-mandated","title":"Tools &amp; platforms (mandated)","text":"<ul> <li>Slack \u2014 team communication &amp; incidents (ChatOps)  </li> <li>Taiga \u2014 Agile board (Scrum/Kanban), backlog, sprints, reviews  </li> <li>GitHub \u2014 version control &amp; submissions (PRs)  </li> <li>VirtualBox/VMware, TrueNAS CORE, Docker, Minikube/Kubernetes </li> <li>AWS Free Tier (EC2, S3, VPC), Jenkins, Ansible, Terraform, Prometheus/Grafana</li> </ul> <p>See Tools &amp; Setup for install links and quick-start notes.</p>"},{"location":"#evaluation-checkpoints","title":"Evaluation &amp; checkpoints","text":"<ul> <li>Theory exam: 40%  </li> <li>Lab exam: 40%  </li> <li>Internal assessment: 20% (Taiga activity, Slack discipline, documentation quality)</li> </ul> <p>Phase checkpoints (graded): 1. Infra Blueprint (after S9) \u2014 VM baseline, DC layout, NAS/SAN 2. Hybrid Infra (after S13) \u2014 VM cluster + AWS VPC + object store 3. CI/CD\u2011ready Infra (after S17) \u2014 Docker + K8s + IaC 4. Ops Dashboard (after S20) \u2014 CI/CD + monitoring in place 5. Final Demo (S23) \u2014 integrated system + security + HA</p>"},{"location":"#class-workflow-every-week","title":"Class workflow (every week)","text":"<ol> <li>Before class: Read the session page; prep tools &amp; accounts.  </li> <li>In class: 2h theory \u2192 2h/4h lab with team roles.  </li> <li>After class: Push commits/notes to GitHub; move Taiga stories to Done; post a short Slack update.  </li> <li>End of phase: Submit checkpoint (repo link + screenshots + short readme).</li> </ol> <p>Daily team habits (recommended)</p> <ul> <li>Quick async stand\u2011up in Slack (yesterday/today/blockers)  </li> <li>Keep Taiga board updated (no secret work)  </li> <li>Small, frequent commits and short PRs</li> </ul>"},{"location":"#getting-started-instructor-checklist","title":"Getting started (instructor checklist)","text":"<ul> <li> Publish this site (GitHub Pages/Netlify/Vercel)  </li> <li> Create Slack workspace &amp; channels (<code>#general</code>, <code>#announcements</code>, <code>#helpdesk</code>, per\u2011team channels)  </li> <li> Create Taiga projects (one per team) &amp; preload epics/stories for S6\u2013S9  </li> <li> Share starter team repo template on GitHub (folders for infra/app/docs)  </li> <li> Verify lab images (Ubuntu LTS ISO, TrueNAS ISO, Minikube, kubectl)  </li> <li> Post Session 0 brief in Slack with links to this site</li> </ul>"},{"location":"#course-policies","title":"Course policies","text":"<p>Collaboration &amp; academic integrity</p> <p>Work as a team, but credit sources and document who did what. Copy\u2011paste without understanding will hurt your lab exam.</p> <p>Submissions</p> <ul> <li>Everything via GitHub PRs to your team repo  </li> <li>Include a short README with steps, configs, screenshots where needed  </li> <li>Link the PR to the Taiga story and mention it in your Slack update</li> </ul>"},{"location":"#references","title":"References","text":"<ul> <li>Primary text: Cloud Computing Black Book (Wiley India, 2024) \u2014 Kogent Learning Solutions Inc., Kailash Jayaswal  </li> <li>Official docs: AWS, Docker, Kubernetes, Ansible, Terraform, Jenkins, Prometheus, Grafana  </li> <li>See References for a curated list.</li> </ul>"},{"location":"#quick-links","title":"Quick links","text":"<ul> <li>Start here \u2192 Session 0 \u00b7 Agile &amp; Tools </li> <li>Ready for infra? \u2192 Session 6 </li> <li>Tools install \u2192 Tools &amp; Setup </li> <li>About the course \u2192 Overview</li> </ul>"},{"location":"00-session-0/","title":"Session 0 \u2014 Agile Foundations &amp; Tool Setup (Slack + Taiga + GitHub)","text":"<p>Format</p> <p>2h theory + 2h lab \u00b7 Team size: 10 (each team = a mini\u2011company inside TechOps Inc.) Tools: Slack, Taiga, GitHub \u00b7 Output: Working Slack workspace + Taiga project + Sprint\u20111 plan + Team repo</p>"},{"location":"00-session-0/#objectives","title":"Objectives","text":"<ul> <li>Explain Agile values &amp; principles, and the differences between Scrum and Kanban in the context of IT Infrastructure &amp; DevOps.</li> <li>Set up team collaboration tools: Slack (ChatOps) and Taiga (Agile project management).</li> <li>Create a syllabus\u2011mapped backlog and plan Sprint 1 (Sessions 6\u20139).</li> <li>Establish working agreements, roles, and a definition of done (DoD) for the team.</li> <li>Prepare a GitHub team repo structure that will be used throughout the course.</li> </ul>"},{"location":"00-session-0/#theory-summary-agile-for-infra-devops","title":"Theory Summary (Agile for Infra &amp; DevOps)","text":"<p>Agile emerged to counter rigid, plan\u2011heavy delivery models that struggled with uncertainty. In Dev and Ops contexts, Agile is less about speed for its own sake and more about short feedback loops, visibility, and continuous improvement. We\u2019ll use Agile to coordinate complex work across infrastructure, cloud, and DevOps pipelines.</p> <p>Agile values emphasize individuals &amp; interactions, working solutions, customer collaboration, and responsiveness to change. In our setting, \u201ccustomer\u201d = your stakeholders: internal teams, instructors, and demo audiences. Principles like frequent delivery, technical excellence, and sustainable pace map well to infrastructure work: small increments (e.g., baseline VM image), validated frequently (checkpoints), and continuously improved (automation).</p> <p>Scrum fits when you have a well\u2011defined increment and cadence: plan a sprint (2\u20133 weeks), hold a daily stand\u2011up (async in Slack), and aim for a potentially shippable increment (e.g., Infra Blueprint by Session 9). Roles are flexible here: a Project Lead plays Scrum Master\u2011like facilitation; the Instructor is close to Product Owner; the team is the cross\u2011functional developers (DevOps, Cloud, Security, Monitoring, Storage/Network).</p> <p>Kanban suits ongoing ops (tickets, incidents, enhancements). You\u2019ll use Kanban columns (To Do \u2192 In Progress \u2192 Review \u2192 Done) with WIP limits to prevent overload while doing labs and hardening.</p> <p>In DevOps culture, ChatOps (tooling + conversation) turns Slack into the central nervous system: GitHub PRs, Jenkins builds, monitoring alerts, and Taiga updates surface in channels so decision\u2011making is transparent and fast. Taiga anchors planning and tracking: epics for phases (Infra, Cloud, DevOps, CI/CD, Security/HA), stories for sessions, and tasks for lab steps. Your Definition of Done ensures quality (docs/screenshots/automation checked in, peer review done, Taiga story moved to Done, Slack summary posted).</p> <p>Key benefits you\u2019ll feel immediately: - Visibility: everyone sees who\u2019s doing what, what\u2019s blocked, and what\u2019s next. - Traceability: each lab deliverable ties to a Taiga story and a GitHub PR. - Incremental progress: you\u2019ll produce checkpoints that layer into the final demo.</p>"},{"location":"00-session-0/#agile","title":"Agile","text":"<p>Agile is a way of working that delivers value in small, useful slices, learning from feedback quickly, and adapting plans as we go. Instead of locking a big plan for months, Agile asks: \u201cWhat\u2019s the next most valuable thing we can deliver in the next short cycle?\u201d</p> <p>Core ideas - Deliver in small batches (1\u20132 week cycles). - Focus on customer/stakeholder value. - Gather fast feedback and adapt. - Encourage collaboration across teams. - Respond to change instead of resisting it.</p> <p>Everyday Example</p> <p>You\u2019re building a college fest website. - Week 1: deliver the schedule page. - Week 2: add speaker bios. - Week 3: add ticketing. After week 1, you learn most users are on mobile, so you adjust next week\u2019s plan to improve mobile experience. \u2192 That\u2019s Agile: deliver \u2192 learn \u2192 adjust.</p>"},{"location":"00-session-0/#_1","title":"Overview","text":""},{"location":"00-session-0/#agile-methodologies-scrum-and-kanban","title":"Agile Methodologies: Scrum and Kanban","text":"<p>Agile is the philosophy. Scrum and Kanban are two popular ways to implement it.</p>"},{"location":"00-session-0/#scrum-time-boxed-approach","title":"Scrum (time-boxed approach)","text":"<ul> <li>Sprints: Short, fixed-length cycles (1\u20133 weeks).</li> <li>Roles: </li> <li>Product Owner (sets priorities)  </li> <li>Scrum Master (facilitates, removes blockers)  </li> <li>Development Team (does the work)</li> <li>Events: Sprint Planning, Daily Stand-ups, Sprint Review, Retrospective.</li> <li>Artifacts: Product Backlog, Sprint Backlog, Increment.</li> </ul> <p>Scrum Example</p> <p>A team promises: \u201cIn 2 weeks, we\u2019ll deliver a baseline VM image.\u201d - They sync daily for 15 min. - At sprint end, they demo the VM and get feedback: \u201cplease add curl and htop.\u201d - Next sprint, they adjust accordingly.</p>"},{"location":"00-session-0/#kanban-flow-based-approach","title":"Kanban (flow-based approach)","text":"<ul> <li>Visualize work on a board (To Do \u2192 In Progress \u2192 Done).</li> <li>Limit Work-In-Progress (WIP) to avoid multitasking chaos.</li> <li>Measure flow: cycle time (start to finish), throughput (items/week).</li> </ul> <p>Kanban Example</p> <p>An ops team gets requests: create users, patch servers, rotate keys. - They allow only 3 tasks max \u201cIn Progress\u201d. - When one finishes, they pull the next. \u2192 Result: fewer half-done tasks, faster average completion.</p>"},{"location":"00-session-0/#scrum-vs-kanban-at-a-glance","title":"Scrum vs Kanban (at a glance)","text":"Scrum Kanban Works in fixed sprints Works in continuous flow Team commits to a sprint goal Team pulls tasks as capacity frees Best for project-style work Best for ongoing ops/support"},{"location":"00-session-0/#lean","title":"Lean","text":"<p>Lean focuses on maximizing value while eliminating waste. Originating in Toyota\u2019s production system, it maps perfectly to IT and DevOps.</p> <p>Three enemies in Lean - Muda (Waste) \u2013 unnecessary work, delays, rework. - Mura (Unevenness) \u2013 workload peaks/valleys causing churn. - Muri (Overburden) \u2013 overloading people/systems.</p> <p>Five Lean Principles 1. Specify value (from customer\u2019s viewpoint). 2. Map the value stream (all steps from request \u2192 delivery). 3. Create flow (remove bottlenecks and stops). 4. Establish pull (work only when demand exists). 5. Seek perfection (continuous improvement).</p> <p>Common wastes in IT/DevOps - Waiting (e.g., PR sits 3 days unreviewed). - Rework (build breaks due to inconsistent environments). - Overprocessing (writing 30-page docs no one reads). - Overproduction (building features/scripts nobody uses). - Inventory/WIP (10 half-done tasks, nothing delivered). - Motion/context switching (jumping across 6 tools). - Unused talent (infra engineers excluded from design).</p>"},{"location":"00-session-0/#implementation-of-lean-devops-context","title":"Implementation of Lean (DevOps context)","text":"<ol> <li>Define value clearly (e.g., \u201ca secure, ready-to-use VM by Friday\u201d).</li> <li>Map the value stream (all steps request \u2192 running system).</li> <li>Measure baseline (lead time, cycle time, MTTR).</li> <li>Remove waste (standard templates, automation, smaller batches).</li> <li>Introduce pull (WIP limits, visualize queues).</li> <li>Make problems visible (dashboards, blocked items).</li> <li>Continuous improvement (small retrospectives after each delivery).</li> </ol> <p>Mini Case</p> <p>Goal: Deliver a sandbox VM in 48 hours. - Old: approval wait 2 days + manual provisioning \u2192 often rework. - Lean: pre-approved hardened template + self-service request. \u2192 Delivery in hours, fewer defects, happier devs.</p>"},{"location":"00-session-0/#lean-and-agile-in-devops","title":"Lean and Agile in DevOps","text":"<ul> <li>Agile = what to build next (short cycles, priorities).  </li> <li>Lean = how to deliver efficiently (cut waste, improve flow).  </li> <li>DevOps = culture + automation bridging Dev &amp; Ops.</li> </ul> <p>Practical intersections - Agile sprints + Lean small batches \u2192 CI/CD pipelines. - Lean \u201creduce handoffs\u201d + Agile \u201ccross-functional teams\u201d \u2192 fewer silos. - Limit WIP + short sprints \u2192 steadier throughput. - Retrospectives (Agile) + Kaizen (Lean) \u2192 continuous improvement.</p> <p>DevOps practices showing Lean + Agile - Small PRs + trunk-based development. - Automated testing &amp; deployments. - Infrastructure as Code (standardization). - Feature flags (safe incremental releases). - Observability (metrics, logs, traces \u2192 faster recovery).  </p> <p>Real-world Outcome</p> <p>A team moves from monthly deployments to twice a week by: - Using Agile sprints (1 feature/week). - Applying Lean (limit WIP, automate tests). Result: smaller, safer deployments, faster recovery, less stress.</p>"},{"location":"00-session-0/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Agile = deliver value in small increments, adapt quickly.  </li> <li>Scrum = structured sprints, Kanban = continuous flow.  </li> <li>Lean = maximize value, eliminate waste.  </li> <li>Lean + Agile = DevOps culture, powered by automation and feedback.  </li> </ul>"},{"location":"00-session-0/#practical-application-techops-inc-simulation","title":"Practical Application (TechOps Inc. Simulation)","text":"<p>Scenario: You\u2019ve just joined TechOps Inc. as a 10\u2011person platform team. You have four weeks to deliver the first milestone: Infra Blueprint (Sessions 6\u20139). Today you will create your communication hub, project board, repo, and a working plan for Sprint\u20111.</p>"},{"location":"00-session-0/#lab-guide-2h","title":"Lab Guide (2h)","text":""},{"location":"00-session-0/#a-slack-workspace-chatops-25-min","title":"A. Slack Workspace (ChatOps) \u2014 25 min","text":"<ol> <li>Create or join the course Slack workspace.  </li> <li>Create channels:</li> <li><code>#announcements</code> (read\u2011only for instructors)</li> <li><code>#helpdesk</code> (Q&amp;A with instructors)</li> <li><code>#team-&lt;company-name&gt;</code> (private team channel)</li> <li>Optional cross\u2011team: <code>#devops</code>, <code>#cloud</code>, <code>#storage</code>, <code>#monitoring</code></li> <li>Add integrations (you can wire these fully in later sessions):</li> <li>GitHub: repo notifications to <code>#team-&lt;company-name&gt;</code></li> <li>Taiga: story updates \u2192 <code>#team-&lt;company-name&gt;</code></li> <li>Pin a Team Charter (copy, edit, and post):</li> <li>Team name, members &amp; roles (Cloud Architect, SysAdmin, DevOps x2, Developers x2, Security, Monitoring, Storage/Network, Project Lead)</li> <li>Working hours, response times</li> <li>Stand\u2011up time (async template: Yesterday / Today / Blockers)</li> <li>Definition of Done (see template below)</li> </ol> <p>DoD template (pin this): - Code/config committed with README and comments - Steps reproducible; credentials redacted; screenshots added - PR raised &amp; reviewed by \u22651 peer - Taiga story moved to Done with link to PR and short summary - Slack update posted (<code>#team-...</code>): what changed, who reviews, where to test</p>"},{"location":"00-session-0/#b-taiga-project-35-min","title":"B. Taiga Project \u2014 35 min","text":"<ol> <li>Create a Taiga project: TechOps Inc. \u2013 Company  <li>Create Epics (map to course phases):</li> <li>Infra Foundations (S6\u2013S9)</li> <li>Virtualization &amp; Cloud (S10\u2013S13)</li> <li>DevOps Foundations (S14\u2013S17)</li> <li>CI/CD &amp; Monitoring (S18\u2013S20)</li> <li>Security &amp; HA (S21\u2013S23)</li> <li>Create User Stories for Sprint\u20111 (Sessions 6\u20139). Suggested set:</li> <li>S6: Baseline VM image (Linux/Windows), snapshot strategy</li> <li>S7: Data center layout &amp; constraints doc</li> <li>S8: NAS (TrueNAS CORE) for team file sharing</li> <li>S9: SAN (iSCSI) for VM cluster</li> <li>Break stories into Tasks (examples):</li> <li>Download Ubuntu LTS ISO; create VM (2 vCPU/4GB/40GB)</li> <li>Install base packages + updates; create <code>baseline-v1</code> snapshot</li> <li>Deploy TrueNAS VM; configure share; test from team VM</li> <li>Configure iSCSI target; connect initiator; validate block storage</li> <li>Add Definition of Done at project level (and link to the Slack post).</li> <li>Set Sprint\u20111 dates (cover S6\u2013S9 timeline); assign story owners; estimate points.</li> <p>(Optional) CSV import: you can prepare a CSV of stories/tasks to import into Taiga if you prefer. Keep a copy in <code>docs/assets/taiga-backlog/</code>.</p>"},{"location":"00-session-0/#c-github-team-repo-35-min","title":"C. GitHub Team Repo \u2014 35 min","text":"<ol> <li>Create a repo (private or internal): <code>techops-&lt;company-name&gt;</code>.</li> <li>Add this starter structure: <pre><code>\u251c\u2500\u2500 infra/\n\u2502 \u251c\u2500\u2500 vm-baseline/\n\u2502 \u251c\u2500\u2500 nas-truenas/\n\u2502 \u2514\u2500\u2500 san-iscsi/\n\u251c\u2500\u2500 cloud/\n\u251c\u2500\u2500 app/\n\u251c\u2500\u2500 cicd/\n\u251c\u2500\u2500 monitoring/\n\u251c\u2500\u2500 security/\n\u2514\u2500\u2500 docs/\n\u251c\u2500\u2500 lab-notes/\n\u2514\u2500\u2500 diagrams/\n</code></pre></li> <li>Add a root README.md with:</li> <li>Team roster &amp; roles</li> <li>How to clone &amp; run labs</li> <li>Links to Slack channel &amp; Taiga board</li> <li>Create a <code>docs/lab-notes/session-06.md</code> file and add checklists for VM setup.</li> <li>Set up branch protection (require PR review by at least one teammate).</li> <li>Connect GitHub \u2192 Slack notifications to your team channel.</li> </ol>"},{"location":"00-session-0/#d-sprint-planning-25-min","title":"D. Sprint Planning \u2014 25 min","text":"<ol> <li>Capacity: note each member\u2019s realistic hours for the sprint.</li> <li>Prioritize stories for S6\u2013S9; split if too big (aim for 1\u20133 days per story).</li> <li>Assign owners; confirm acceptance criteria align with DoD.</li> <li>Add risk/assumption notes: ISO availability, network limits, hardware quotas.</li> <li>Post the Sprint plan summary in Slack and pin it.</li> </ol>"},{"location":"00-session-0/#checkpoints-end-of-session","title":"Checkpoints (end of session)","text":"<ul> <li> Slack workspace &amp; team channel ready; Team Charter pinned  </li> <li> Taiga project created with Epics, Stories (S6\u2013S9), Tasks, Sprint\u20111 dates  </li> <li> GitHub repo created with agreed folder structure + initial README  </li> <li> Definition of Done documented and referenced in both Slack &amp; Taiga  </li> <li> Sprint\u20111 plan posted in Slack (owner per story + acceptance criteria)</li> </ul>"},{"location":"00-session-0/#quick-quiz-knowledge-check","title":"Quick Quiz (knowledge check)","text":"Which Agile practice best ensures visibility of daily progress and blockers? <ul> <li> Daily stand\u2011ups (async in Slack)</li> <li> Quarterly release planning</li> <li> Post\u2011mortems only after failures</li> <li> Annual performance reviews</li> </ul> In this course, who is closest to the Product Owner role? <ul> <li> Instructor (defining outcomes &amp; acceptance)</li> <li> Security Engineer</li> <li> Project Lead</li> <li> Cloud Architect</li> </ul> What belongs in our Definition of Done (pick all that apply)? <ul> <li> Reproducible steps &amp; docs in repo</li> <li> PR reviewed by a teammate</li> <li> Taiga story moved to Done with links</li> <li> Only a verbal confirmation in class</li> </ul>"},{"location":"00-session-0/#deliverables-to-be-graded","title":"Deliverables (to be graded)","text":"<ol> <li>Slack: Link to team channel + pinned Team Charter &amp; DoD  </li> <li>Taiga: Project URL + screenshot of Sprint\u20111 board  </li> <li>GitHub: Repo URL + screenshot of repo structure  </li> <li>Sprint\u20111 plan: Short note in Slack with owners &amp; dates</li> </ol>"},{"location":"00-session-0/#referencesself-study-youtube-slides","title":"References/Self Study (YouTube / Slides)","text":"<p>You can drop these into this page later:</p>"},{"location":"about/overview/","title":"Course Overview \u2014 IT Infrastructure &amp; DevOps","text":"<p>Welcome to PG-DITISS Aug 2025 \u2014 IT Infrastructure &amp; DevOps.</p> <p>This course prepares students to design, deploy, automate, and operate modern IT infrastructure using both on-premise systems and cloud platforms, while adopting DevOps principles for agility and reliability.</p>"},{"location":"about/overview/#learning-outcomes","title":"Learning Outcomes","text":"<p>By the end of the course, students will be able to:</p> <ul> <li>Explain the key components of IT infrastructure: compute, storage, networking, virtualization, cloud.</li> <li>Design and simulate a data center with realistic constraints.</li> <li>Configure NAS and SAN storage solutions.</li> <li>Build and manage VM clusters and hybrid cloud deployments (AWS Free Tier).</li> <li>Containerize applications with Docker and orchestrate with Kubernetes/Minikube.</li> <li>Automate infrastructure provisioning with Ansible and Terraform.</li> <li>Set up CI/CD pipelines with Jenkins/GitHub Actions.</li> <li>Implement monitoring and logging with Prometheus &amp; Grafana.</li> <li>Enforce security practices, IAM, secrets management, and high availability designs.</li> </ul>"},{"location":"about/overview/#teaching-approach","title":"Teaching Approach","text":"<ul> <li>Simulation-based: Students act as teams inside a fictional company \u2014 TechOps Inc.</li> <li>Agile methodology: Slack for communication, Taiga for sprint planning &amp; backlog management.</li> <li>Hands-on labs: 44 hours of guided labs using open-source and cloud-free tier tools.</li> <li>Gamification: Badges, checkpoints, and a \u201cBest Performing Company\u201d award.</li> <li>Evaluation mix:</li> <li>Theory exam: 40%</li> <li>Lab exam: 40%</li> <li>Internal assessment (participation, documentation, teamwork): 20%</li> </ul>"},{"location":"about/overview/#course-structure","title":"Course Structure","text":"<ul> <li>Session 0: Agile &amp; Tools setup (Slack, Taiga, GitHub)</li> <li>Sessions 6\u20139: Infrastructure Foundations</li> <li>Sessions 10\u201313: Virtualization &amp; Cloud</li> <li>Sessions 14\u201317: DevOps Foundations</li> <li>Sessions 18\u201320: CI/CD &amp; Monitoring</li> <li>Sessions 21\u201323: Security &amp; HA, Final Integration</li> </ul> <p>Each session includes: Objectives \u00b7 Theory \u00b7 Lab \u00b7 Scenario \u00b7 Quiz \u00b7 Deliverables \u00b7 Rubric.</p>"},{"location":"about/overview/#primary-reference","title":"Primary Reference","text":"<ul> <li>Cloud Computing Black Book (Wiley India, 2024)   by Kogent Learning Solutions Inc., Kailash Jayaswal</li> </ul> <p>Additional references: AWS, Docker, Kubernetes, Jenkins, Ansible, Terraform, Prometheus, Grafana documentation.</p>"},{"location":"phase-1/session-06/","title":"Session 6 \u2014 IT Infrastructure Overview","text":"<p>Session format</p> <p>2h theory + 2h lab \u00b7 Team size: 10 (TechOps Inc. simulation) \u00b7 Tools: VirtualBox/VMware, Slack, Taiga, GitHub</p>"},{"location":"phase-1/session-06/#objectives","title":"Objectives","text":"<ul> <li>Map components of IT infrastructure (compute, network, storage, virtualization).</li> <li>Prepare a base VM image for all future labs.</li> <li>Document decisions on OS baseline, package strategy, and snapshots.</li> </ul>"},{"location":"phase-1/session-06/#theory-summary","title":"Theory Summary","text":"<ul> <li>Concise 500\u2013800 words here, aligned to syllabus &amp; Cloud Computing Black Book (add page refs).</li> </ul>"},{"location":"phase-1/session-06/#practical-application-techops-inc","title":"Practical Application (TechOps Inc.)","text":"<ul> <li>Scenario: Your company must standardize developer workstations and lab VMs.</li> <li>Task: Create a baseline Linux VM (Ubuntu LTS) and a Windows VM with snapshots.</li> </ul>"},{"location":"phase-1/session-06/#lab-guide","title":"Lab Guide","text":"Linux VMWindows VM <ol> <li>Download Ubuntu LTS ISO.</li> <li>Create VM (2 vCPU, 4GB RAM, 40GB disk).</li> <li>Post-install: <code>curl</code>, <code>git</code>, <code>docker</code> (optional), SSH, updates.</li> <li>Snapshot: <code>baseline-v1</code>.</li> </ol> <p>Steps, drivers, WinRM/PowerShell remoting, snapshot.</p>"},{"location":"phase-1/session-06/#checkpoints","title":"Checkpoints","text":"<ul> <li> VM boots cleanly and updates applied  </li> <li> Snapshot created and named correctly  </li> <li> README with credentials and IPs committed to GitHub</li> </ul>"},{"location":"phase-1/session-06/#quiz-quick-check","title":"Quiz (quick check)","text":"Which layer provides block-level storage to servers? <ul> <li> NAS</li> <li> SAN</li> <li> CDN</li> <li> Object Storage</li> </ul>"},{"location":"phase-1/session-06/#deliverables","title":"Deliverables","text":"<ul> <li><code>infra/VM-baseline/README.md</code> in your team repo.</li> <li>Screenshot(s) of snapshots in Taiga story.</li> </ul>"},{"location":"phase-1/session-06/#rubric-10-pts","title":"Rubric (10 pts)","text":"<ul> <li>Functionality (4), Documentation (3), Reproducibility (2), Cleanliness (1)</li> </ul>"},{"location":"phase-1/session-06/#diagram","title":"Diagram","text":"<p>```mermaid flowchart LR   Dev[Developers] --&gt;|Access| VM[(Baseline VM)]   VM --&gt;|Snapshots| Repo[(GitHub Docs)]</p>"},{"location":"resources/tools/","title":"Tools &amp; Setup Guide","text":"<p>This course relies on a mix of open-source tools and cloud free tiers. Follow this guide to prepare your workstation and accounts.</p>"},{"location":"resources/tools/#core-tools","title":"Core Tools","text":"<ul> <li>Python 3 + venv \u2192 for MkDocs &amp; site builds  </li> <li>Git &amp; GitHub \u2192 version control, submissions  </li> <li>Slack \u2192 team communication, ChatOps  </li> <li>Taiga \u2192 Agile project management (Scrum/Kanban boards)  </li> </ul>"},{"location":"resources/tools/#infrastructure-virtualization","title":"Infrastructure &amp; Virtualization","text":"<ul> <li>VirtualBox (free) or VMware Workstation Player \u2192 VM hosting  </li> <li>Ubuntu LTS ISO \u2192 baseline Linux VM  </li> <li>Windows ISO (optional) \u2192 baseline Windows VM  </li> <li>TrueNAS CORE \u2192 NAS &amp; SAN labs  </li> </ul>"},{"location":"resources/tools/#cloud","title":"Cloud","text":"<ul> <li>AWS Free Tier account \u2192 EC2, S3, VPC labs  </li> <li>MinIO \u2192 local S3-compatible object storage  </li> </ul>"},{"location":"resources/tools/#containers-devops","title":"Containers &amp; DevOps","text":"<ul> <li>Docker Desktop / Docker Engine </li> <li>Minikube + kubectl \u2192 local Kubernetes cluster  </li> <li>Helm (optional) \u2192 package manager for Kubernetes  </li> <li>Jenkins \u2192 CI/CD pipelines (or GitHub Actions alternative)  </li> <li>Ansible \u2192 configuration management, automation  </li> <li>Terraform \u2192 Infrastructure as Code for cloud provisioning  </li> </ul>"},{"location":"resources/tools/#monitoring-logging","title":"Monitoring &amp; Logging","text":"<ul> <li>Prometheus \u2192 metrics collection  </li> <li>Grafana \u2192 dashboards &amp; visualizations  </li> <li>ELK Stack (optional) \u2192 logs aggregation  </li> </ul>"},{"location":"resources/tools/#security","title":"Security","text":"<ul> <li>AWS IAM \u2192 users, roles, policies  </li> <li>Vault (HashiCorp) (optional) \u2192 secrets management  </li> <li>OpenVAS or similar (optional) \u2192 vulnerability scanning  </li> </ul>"},{"location":"resources/tools/#suggested-folder-structure-per-team-repo","title":"Suggested Folder Structure (per team repo)","text":"<pre><code>team-repo/\n\u251c\u2500\u2500 infra/ # VM configs, Terraform, Ansible playbooks\n\u251c\u2500\u2500 app/ # Sample app (containerized)\n\u251c\u2500\u2500 cicd/ # Jenkins pipelines, workflows\n\u251c\u2500\u2500 monitoring/ # Prometheus, Grafana configs\n\u251c\u2500\u2500 security/ # IAM policies, hardening scripts\n\u2514\u2500\u2500 docs/ # Lab notes, screenshots, diagrams\n</code></pre>"},{"location":"resources/tools/#pre-course-checklist","title":"Pre-course Checklist","text":"<ul> <li> Install VirtualBox (or VMware Workstation)  </li> <li> Download Ubuntu LTS ISO  </li> <li> Create GitHub account  </li> <li> Create Slack account (invite link will be provided)  </li> <li> Create Taiga account (invite link will be provided)  </li> <li> Register AWS Free Tier account  </li> <li> Install Docker + Minikube + kubectl  </li> </ul>"},{"location":"roadmap/roadmap/","title":"Course Roadmap \u2014 IT Infrastructure &amp; DevOps (PG-DITISS Aug 2025)","text":"<p>Welcome to the Course Roadmap. This page gives you a high-level overview of all sessions (0\u201323), showing what you\u2019ll learn in each, before diving into the detailed session pages.</p>"},{"location":"roadmap/roadmap/#session-0-agile-foundations-tools","title":"Session 0 \u00b7 Agile Foundations &amp; Tools","text":"<ul> <li>What you\u2019ll learn: Agile principles, Scrum vs Kanban, Lean, and how Agile + DevOps fit together.  </li> <li>Hands-on: Set up Slack workspace, Taiga boards, team roles, and plan Sprint-1 backlog.</li> </ul>"},{"location":"roadmap/roadmap/#phase-1-infrastructure-foundations-sessions-69","title":"Phase 1 \u00b7 Infrastructure Foundations (Sessions 6\u20139)","text":"<p>Theme: Building the digital workplace You\u2019ll explore physical and virtual infrastructure, storage, and data center basics.</p> <ul> <li>Session 6: IT Infrastructure Overview   Learn the core building blocks of IT infrastructure (compute, storage, networking, virtualization).  </li> <li>Session 7: Data Center Management   Understand racks, servers, power, cooling, and design a data center with constraints.  </li> <li>Session 8: Storage Technologies   Explore DAS, NAS, SAN, RAID, ZFS, and set up a network-attached storage (NAS).  </li> <li>Session 9: Storage Area Network (SAN)   Discover SAN concepts (iSCSI, Fibre Channel) and configure shared block storage.</li> </ul> <p>\u2705 Checkpoint 1: Infra Blueprint \u2014 baseline VMs, DC layout, NAS + SAN setup.</p>"},{"location":"roadmap/roadmap/#phase-2-virtualization-cloud-sessions-1013","title":"Phase 2 \u00b7 Virtualization &amp; Cloud (Sessions 10\u201313)","text":"<p>Theme: Scaling the enterprise Learn how enterprises use virtualization and cloud to grow.</p> <ul> <li>Session 10: Server Virtualization   Understand hypervisors, VM lifecycle, snapshots, and multi-VM clusters.  </li> <li>Session 11: Cloud Computing Basics   Explore cloud models (IaaS, PaaS, SaaS) and launch an AWS EC2 instance.  </li> <li>Session 12: Cloud Storage &amp; Databases   Learn object storage (S3/MinIO), block storage, and DBaaS.  </li> <li>Session 13: Virtual Private Cloud (VPC)   Build secure VPCs with subnets, routing, and security groups.</li> </ul> <p>\u2705 Checkpoint 2: Hybrid Infra \u2014 VM cluster + AWS VPC + storage/database integration.</p>"},{"location":"roadmap/roadmap/#phase-3-devops-foundations-sessions-1417","title":"Phase 3 \u00b7 DevOps Foundations (Sessions 14\u201317)","text":"<p>Theme: From manual to automated Shift from manual system admin tasks to automated, containerized workflows.</p> <ul> <li>Session 14: DevOps Principles   Learn DevOps culture, CI/CD, automation, and collaboration models.  </li> <li>Session 15: Containers (Docker)   Build and run containerized apps; compare containers vs VMs.  </li> <li>Session 16: Container Orchestration (Kubernetes)   Deploy multi-container apps with scaling and service discovery.  </li> <li>Session 17: Infrastructure Automation (Ansible/Terraform)   Use Infrastructure as Code to automate provisioning.</li> </ul> <p>\u2705 Checkpoint 3: CI/CD-ready Infra \u2014 Dockerized app, Kubernetes deployment, automation scripts.</p>"},{"location":"roadmap/roadmap/#phase-4-cicd-monitoring-sessions-1820","title":"Phase 4 \u00b7 CI/CD &amp; Monitoring (Sessions 18\u201320)","text":"<p>Theme: Continuous everything Learn how modern teams ship changes fast and safely, with observability.</p> <ul> <li>Session 18: CI/CD Pipelines   Build pipelines using Jenkins or GitHub Actions for automated builds/deploys.  </li> <li>Session 19: Monitoring &amp; Logging   Collect metrics and logs using Prometheus and Grafana dashboards.  </li> <li>Session 20: Configuration Management   Standardize environments using Ansible, Chef, or Puppet.</li> </ul> <p>\u2705 Checkpoint 4: Ops Dashboard \u2014 functional CI/CD + monitoring setup.</p>"},{"location":"roadmap/roadmap/#phase-5-security-enterprise-readiness-sessions-2123","title":"Phase 5 \u00b7 Security &amp; Enterprise Readiness (Sessions 21\u201323)","text":"<p>Theme: Running like a real enterprise Ensure your infra is secure, reliable, and resilient.</p> <ul> <li>Session 21: Security in Cloud &amp; DevOps   IAM, secrets management, vulnerability scanning, and secure configurations.  </li> <li>Session 22: High Availability &amp; Fault Tolerance   Load balancing, redundancy, multi-AZ deployments.  </li> <li>Session 23: Final Integration &amp; Demo   Integrate everything; teams present their full infra with CI/CD, monitoring, security, and HA.</li> </ul> <p>\u2705 Final Deliverable: TechOps Inc. Company Portfolio \u2014 GitHub repo, infra demo, and presentation.</p>"},{"location":"roadmap/roadmap/#key-checkpoints-milestones","title":"Key Checkpoints &amp; Milestones","text":"<ul> <li>Checkpoint 1: Infra Blueprint (end of Session 9)  </li> <li>Checkpoint 2: Hybrid Infra (end of Session 13)  </li> <li>Checkpoint 3: CI/CD-ready Infra (end of Session 17)  </li> <li>Checkpoint 4: Ops Dashboard (end of Session 20)  </li> <li>Final Demo: Integrated system with security + HA (Session 23)</li> </ul>"},{"location":"roadmap/roadmap/#evaluation-aligned-with-syllabus","title":"Evaluation (aligned with syllabus)","text":"<ul> <li>Theory exam: 40%  </li> <li>Lab exam: 40%  </li> <li>Internal assessment: 20% (Slack + Taiga activity, team contributions)</li> </ul>"},{"location":"roadmap/roadmap/#tldr","title":"TL;DR","text":"<p>You\u2019ll start with Agile + collaboration tools, then build step-by-step: 1. On-prem infra (VMs, DC, storage) 2. Hybrid cloud (AWS + virtualization) 3. Containers &amp; automation (DevOps basics) 4. CI/CD + monitoring (delivery pipelines &amp; observability) 5. Security + HA \u2192 full enterprise-ready demo  </p>"}]}
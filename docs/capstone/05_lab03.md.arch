# Lab 03 — AWS IAM Setup

**Role(s) Responsible:** Project Owner / IAM Engineer

**Objectives**

* Create IAM users for each team role with console + CLI access.
* Create and attach **simplified, role-appropriate IAM policies** (no full Admin to users).
* Create Terraform service user and attach Terraform policy (used by Terraform Cloud).
* Create Jenkins EC2 role and App EC2 role (instance profiles) with appropriate permissions.
* Produce and securely distribute credentials for every user in the format:

  ```
  Role:
  Username:
  Password:
  Account ID:
  Access Key:
  Secret Key:
  ```
* Validate each user can log in and use CLI actions allowed for their role.

---

## Pre-requisites

* You are logged into the AWS account with an IAM user that has **AdministratorAccess** (Project Owner / IAM Engineer).
* AWS CLI v2 installed and configured for the admin user (`aws configure`).
* A local folder for lab files, e.g. `labs/lab03/` to store policy JSON files and outputs.

---

## High-level plan (what we will create)

1. `techops-teamX` IAM group (base membership).
2. Per-role policies (simplified scoped): Architect, Network, SysAdmin, Storage, Monitoring, Developer, DevOps, Scrum Master.
3. IAM users (one per role) — create login profile + access keys.
4. Terraform service user `techops-terraform` + attach TerraformPolicy.
5. Jenkins EC2 Role (instance profile) + App EC2 Role (instance profile).
6. Produce per-user credential file and confirm login & CLI access.

---

## Files you will create

Create a working folder and store all JSON policy files there:

```
labs/lab03/policies/
  - terraform-policy.json
  - architect-policy.json
  - network-policy.json
  - sysadmin-policy.json
  - storage-policy.json
  - monitoring-policy.json
  - developer-policy.json
  - devops-policy.json
  - scrum-policy.json
  - jenkins-ec2-policy.json
  - app-ec2-policy.json
  - ec2-trust.json
```

!!! tip "One Command to Create Above Strucutre"

    You can use following command to create the folder structure in one go:

    ```
    mkdir -p labs/lab03/policies && touch labs/lab03/policies/{terraform-policy.json,architect-policy.json,network-policy.json,sysadmin-policy.json,storage-policy.json,monitoring-policy.json,developer-policy.json,devops-policy.json,scrum-policy.json,jenkins-ec2-policy.json,app-ec2-policy.json,ec2-trust.json}
    ```
---

## Step-by-step instructions (copy/paste)

**Step 0 — Set variables**

```bash
# Adjust team name/ids
TEAM="teamX"
GROUP="techops-${TEAM}"
ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
REGION="ap-south-1"    # or your chosen region
OUTDIR="labs/lab03/output"
mkdir -p labs/lab03/policies $OUTDIR
```

---

### Step 1 — Create group

```bash
aws iam create-group --group-name ${GROUP}
```

---

### Step 2 — Create simplified policies

Save the following JSON files under `labs/lab03/policies/` and create them via `aws iam create-policy`. (I include compact, safe-but-functional policies tailored per role.)


!!! tip "Use Nano"

    * Use nano editor to create policies faster. If you do not have nano install you can run `sudo apt install nano`
    * Then you can run command like `nano /labs/lab03/policy/terraform-policy.json`
    * Copy the contents from lab and paste them
    * To save & exit use shortcut `Crtl+O` -> `Enter` -> `Crtl+X`

**A. Terraform policy (broader infra access for Terraform Cloud) — `terraform-policy.json`**

```json
{
  "Version":"2012-10-17",
  "Statement":[
    {"Effect":"Allow","Action":["ec2:*","elasticloadbalancing:*","autoscaling:*","vpc:*","route53:*","ecr:*","s3:*","iam:PassRole","cloudwatch:*","logs:*","kms:*","dynamodb:*"],"Resource":"*"}
  ]
}
```

**B. Architect policy — `architect-policy.json`** (read + limited write for tagging / describe)

```json
{
  "Version":"2012-10-17",
  "Statement":[
    {"Effect":"Allow","Action":["ec2:Describe*","vpc:Describe*","route53:ListHostedZones","ec2:DescribeTags","s3:ListAllMyBuckets","s3:GetBucketLocation"],"Resource":"*"},
    {"Effect":"Allow","Action":["tag:GetResources","tag:TagResources"],"Resource":"*"}
  ]
}
```

**C. Network policy — `network-policy.json`** (VPC, subnets, SG manage)

```json
{
  "Version":"2012-10-17",
  "Statement":[
    {"Effect":"Allow","Action":["ec2:CreateVpc","ec2:DeleteVpc","ec2:CreateSubnet","ec2:ModifySubnetAttribute","ec2:CreateSecurityGroup","ec2:AuthorizeSecurityGroupIngress","ec2:RevokeSecurityGroupIngress","ec2:DeleteSecurityGroup","ec2:Describe*"],"Resource":"*"}
  ]
}
```

**D. SysAdmin policy — `sysadmin-policy.json`** (manage EC2 instances, EBS, SSM)

```json
{
  "Version":"2012-10-17",
  "Statement":[
    {"Effect":"Allow","Action":["ec2:RunInstances","ec2:TerminateInstances","ec2:StartInstances","ec2:StopInstances","ec2:DescribeInstances","ec2:CreateTags","ec2:AttachVolume","ec2:DetachVolume","ec2:DescribeVolumes","ssm:SendCommand"],"Resource":"*"}
  ]
}
```

**E. Storage policy — `storage-policy.json`** (S3 + EBS operations)

```json
{
  "Version":"2012-10-17",
  "Statement":[
    {"Effect":"Allow","Action":["s3:PutObject","s3:GetObject","s3:ListBucket","s3:CreateBucket","s3:DeleteObject","ec2:CreateSnapshot","ec2:DeleteSnapshot","ec2:DescribeVolumes"],"Resource":"*"}
  ]
}
```

**F. Monitoring policy — `monitoring-policy.json`** (logs, create metric filters; since we use Prometheus, grant EC2 + S3)

```json
{
  "Version":"2012-10-17",
  "Statement":[
    {"Effect":"Allow","Action":["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents","logs:DescribeLogStreams","ec2:DescribeInstances","s3:PutObject","s3:GetObject","cloudwatch:PutMetricData"],"Resource":"*"}
  ]
}
```

**G. Developer policy — `developer-policy.json`** (limited EC2, ECR push/pull)

```json
{
  "Version":"2012-10-17",
  "Statement":[
    {"Effect":"Allow","Action":["ecr:GetAuthorizationToken","ecr:BatchGetImage","ecr:GetDownloadUrlForLayer","ecr:BatchCheckLayerAvailability","ecr:InitiateLayerUpload","ecr:UploadLayerPart","ecr:CompleteLayerUpload","ecr:PutImage"],"Resource":"*"},
    {"Effect":"Allow","Action":["ec2:DescribeInstances","ec2:RunInstances","ec2:StopInstances","ec2:StartInstances"],"Resource":"*"}
  ]
}
```

**H. DevOps policy — `devops-policy.json`** (ECR push/pull, S3 for artifacts, and limited EC2 deploy)

```json
{
  "Version":"2012-10-17",
  "Statement":[
    {"Effect":"Allow","Action":["ecr:*","s3:*","ec2:DescribeInstances","ec2:StartInstances","ec2:StopInstances","ssm:SendCommand","iam:PassRole"],"Resource":"*"}
  ]
}
```

**I. Scrum Master policy — `scrum-policy.json`** (read-only)

```json
{
  "Version":"2012-10-17",
  "Statement":[
    {"Effect":"Allow","Action":["ec2:Describe*","vpc:Describe*","s3:ListAllMyBuckets","s3:GetBucketLocation","cloudwatch:GetMetricData","logs:DescribeLogGroups","logs:DescribeLogStreams"],"Resource":"*"}
  ]
}
```

**J. Jenkins EC2 policy — `jenkins-ec2-policy.json`**

```json
{
  "Version":"2012-10-17",
  "Statement":[
    {"Effect":"Allow","Action":["ecr:GetAuthorizationToken","ecr:BatchGetImage","ecr:GetDownloadUrlForLayer","ecr:BatchCheckLayerAvailability","s3:GetObject","s3:PutObject","ssm:GetParameters","ssm:GetParameter","secretsmanager:GetSecretValue","iam:PassRole"],"Resource":"*"}
  ]
}
```

**K. App EC2 policy — `app-ec2-policy.json`**

```json
{
  "Version":"2012-10-17",
  "Statement":[
    {"Effect":"Allow","Action":["s3:GetObject","s3:PutObject","logs:CreateLogStream","logs:PutLogEvents"],"Resource":"*"}
  ]
}
```

**L. EC2 trust policy for instance profiles — `ec2-trust.json`**

```json
{
  "Version":"2012-10-17",
  "Statement":[
    {
      "Effect":"Allow",
      "Principal":{"Service":"ec2.amazonaws.com"},
      "Action":"sts:AssumeRole"
    }
  ]
}
```

**Create all policies**

```bash
cd labs/lab03/policies
aws iam create-policy --policy-name TechOps_TerraformPolicy --policy-document file://terraform-policy.json
aws iam create-policy --policy-name TechOps_ArchitectPolicy --policy-document file://architect-policy.json
aws iam create-policy --policy-name TechOps_NetworkPolicy --policy-document file://network-policy.json
aws iam create-policy --policy-name TechOps_SysAdminPolicy --policy-document file://sysadmin-policy.json
aws iam create-policy --policy-name TechOps_StoragePolicy --policy-document file://storage-policy.json
aws iam create-policy --policy-name TechOps_MonitoringPolicy --policy-document file://monitoring-policy.json
aws iam create-policy --policy-name TechOps_DeveloperPolicy --policy-document file://developer-policy.json
aws iam create-policy --policy-name TechOps_DevOpsPolicy --policy-document file://devops-policy.json
aws iam create-policy --policy-name TechOps_ScrumPolicy --policy-document file://scrum-policy.json
aws iam create-policy --policy-name TechOps_JenkinsEC2Policy --policy-document file://jenkins-ec2-policy.json
aws iam create-policy --policy-name TechOps_AppEC2Policy --policy-document file://app-ec2-policy.json
```

> Note: `create-policy` will output the policy ARN — copy them or run `aws iam list-policies --scope Local` later.

---

### Step 3 — Create roles / instance-profiles for EC2 (Jenkins and App)

```bash
aws iam create-role --role-name TechOps_JenkinsRole --assume-role-policy-document file://labs/lab03/policies/ec2-trust.json
aws iam attach-role-policy --role-name TechOps_JenkinsRole --policy-arn arn:aws:iam::${ACCOUNT_ID}:policy/TechOps_JenkinsEC2Policy
aws iam create-instance-profile --instance-profile-name TechOps_JenkinsInstanceProfile
aws iam add-role-to-instance-profile --instance-profile-name TechOps_JenkinsInstanceProfile --role-name TechOps_JenkinsRole

aws iam create-role --role-name TechOps_AppRole --assume-role-policy-document file://labs/lab03/policies/ec2-trust.json
aws iam attach-role-policy --role-name TechOps_AppRole --policy-arn arn:aws:iam::${ACCOUNT_ID}:policy/TechOps_AppEC2Policy
aws iam create-instance-profile --instance-profile-name TechOps_AppInstanceProfile
aws iam add-role-to-instance-profile --instance-profile-name TechOps_AppInstanceProfile --role-name TechOps_AppRole
```

---

### Step 4 — Create the Terraform service user and attach Terraform policy

```bash
aws iam create-user --user-name techops-terraform
aws iam add-user-to-group --group-name ${GROUP} --user-name techops-terraform

# Attach policy (use ARN from create-policy or list-policies)
aws iam attach-user-policy --user-name techops-terraform --policy-arn arn:aws:iam::${ACCOUNT_ID}:policy/TechOps_TerraformPolicy

# Create access keys (save output)
aws iam create-access-key --user-name techops-terraform > ${OUTDIR}/techops-terraform-keys.json
```

Record `AccessKeyId` and `SecretAccessKey` from `${OUTDIR}/techops-terraform-keys.json`.

**Add these as environment variables in Terraform Cloud workspace** (sensitive):

* AWS_ACCESS_KEY_ID = `AccessKeyId`
* AWS_SECRET_ACCESS_KEY = `SecretAccessKey`
* AWS_DEFAULT_REGION = `${REGION}`

---

### Step 5 — Create human users per role and attach role-specific policies

1. Install `jq` libraries by running command `sudo apt install jq -y`
2. **Create bsah script:** `nano create_iam_users.sh`
3. Copy and paste below script then save and exit `(Ctrl+O, Enter, Ctrl+X)`.

```bash
#!/bin/bash

# Exit on any error
set -e

# Validate environment variables
if [[ -z "$ACCOUNT_ID" || -z "$GROUP" || -z "$OUTDIR" ]]; then
  echo "Error: ACCOUNT_ID, GROUP, and OUTDIR must be set."
  exit 1
fi

# Ensure output directory exists
mkdir -p "$OUTDIR" || { echo "Failed to create $OUTDIR"; exit 1; }

declare -A USERS
USERS=(
  ["iam-engineer"]="iam_engineer"
  ["architect"]="architect1"
  ["network"]="network1"
  ["sysadmin"]="sysadmin1"
  ["storage"]="storage1"
  ["monitoring"]="monitoring1"
  ["developer"]="developer1"
  ["devops"]="devops1"
  ["scrum"]="scrum1"
)

declare -A POLICYMAP
POLICYMAP=(
  ["iam-engineer"]="arn:aws:iam::${ACCOUNT_ID}:policy/TechOps_TerraformPolicy"
  ["architect"]="arn:aws:iam::${ACCOUNT_ID}:policy/TechOps_ArchitectPolicy"
  ["network"]="arn:aws:iam::${ACCOUNT_ID}:policy/TechOps_NetworkPolicy"
  ["sysadmin"]="arn:aws:iam::${ACCOUNT_ID}:policy/TechOps_SysAdminPolicy"
  ["storage"]="arn:aws:iam::${ACCOUNT_ID}:policy/TechOps_StoragePolicy"
  ["monitoring"]="arn:aws:iam::${ACCOUNT_ID}:policy/TechOps_MonitoringPolicy"
  ["developer"]="arn:aws:iam::${ACCOUNT_ID}:policy/TechOps_DeveloperPolicy"
  ["devops"]="arn:aws:iam::${ACCOUNT_ID}:policy/TechOps_DevOpsPolicy"
  ["scrum"]="arn:aws:iam::${ACCOUNT_ID}:policy/TechOps_ScrumPolicy"
)

for role in "${!USERS[@]}"; do
  username=${USERS[$role]}
  echo "Creating user $username for role $role"

  # Skip if user exists
  if aws iam get-user --user-name "$username" >/dev/null 2>&1; then
    echo "User $username already exists, skipping."
    continue
  fi

  aws iam create-user --user-name "$username" || { echo "Failed to create user $username"; exit 1; }
  aws iam add-user-to-group --group-name "${GROUP}" --user-name "$username" || { echo "Failed to add $username to group"; exit 1; }

  # Create console password
  PASSWORD="ChangeMe!$(openssl rand -hex 4)"
  aws iam create-login-profile --user-name "$username" --password "$PASSWORD" --password-reset-required || { echo "Failed to create login profile for $username"; exit 1; }

  # Create access key
  KEY_OUTPUT=$(aws iam create-access-key --user-name "$username") || { echo "Failed to create access key for $username"; exit 1; }
  AKID=$(echo "$KEY_OUTPUT" | jq -r '.AccessKey.AccessKeyId')
  SAK=$(echo "$KEY_OUTPUT" | jq -r '.AccessKey.SecretAccessKey')

  # Attach role policy
  aws iam attach-user-policy --user-name "$username" --policy-arn "${POLICYMAP[$role]}" || { echo "Failed to attach policy for $username"; exit 1; }

  # Save credentials
  cat > "${OUTDIR}/${username}.txt" <<EOF
Role: $role
Username: $username
Password: $PASSWORD
Account ID: $ACCOUNT_ID
Access Key: $AKID
Secret Key: $SAK
EOF

  echo "Created $username; credentials saved to ${OUTDIR}/${username}.txt"
done
```
4. **Make the Script Executable:**
   ```bash
   chmod +x create_iam_users.sh
   ```
5. **Run the Script:** Execute the script:
   ```bash
   ./create_iam_users.sh
   ```

---

!!! tip "Attach additional permissions if needed"

    If any role needs an extra permission discovered during manual testing, attach it with:

    ```bash
    aws iam attach-user-policy --user-name developer1 --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess
    ```

    (Prefer attaching your custom TechOps_* policies, not AWS managed full-access policies unless needed.)

---

### Step 6 — Commit your policies to GitHub Repo

1. Create directories inside your **repo folder** *(Replace <your-team-name> with your actual team name and repo folder*)
   ```bash
   mkdir techops-capstone-<your-team-name>/infrastructure/iam
   mkdir techops-capstone-<your-team-name>/infrastructure/iam/policies
   cp labs/lab03/policies/*.json techops-capstone-<your-team-name>/infrastructure/iam/policies/
   ```
2. `cd` into your repo folder
   ```bash
   cd techops-capstone-<your-team-name>
   ```
3. Commit and push to new Git branch
   ```bash
   git add .
   git commit -m "Added IAM Policies"
   git checkout -b "iam-1"
   git push origin iam-1
   ```
4. Go to Github and in your orgisation where you have created the repo. For example *https://github.com/ditiss-your-team-name/techops-capstone-your-team-name*
5. Click on `Compare & pull Request`
6. Add following Details
      * Title: `Added IAM Policies`
      * Description: `Created policies and users in AWS IAM`
      
7. Click on `Create pull request`
8. Ask Project Owner/Any other person in your team to go your repo
9. Click on `Pull Requests`
10. Click on `Added IAM Policies` or any other title that you have given in above step 6.1
11. Click on `Files Changed`
12. Click on `Review Changes`
13. Select `Approve` radio button
14. Click on `Submit review`
15. Now back on your screen, refresh the page and you will see `Merge Pull request` button enabled. Click on it to Merge the pull request 
16. Click on `Confirm merge`

You have successfully merged your chagnes to your Github Repo now!

### Step 7 — Validate each user (user must run this on their workstation)

Each user should run:

```bash
aws configure      # enter their Access Key & Secret Key, region, json
aws sts get-caller-identity
```

Expected: JSON with `Account` = `${ACCOUNT_ID}` and `Arn` containing `user/<username>`.

Test role-specific actions (examples):

* **Architect** (describe VPC):

  ```bash
  aws ec2 describe-vpcs
  ```
* **Network** (create a test security group in test VPC):

  ```bash
  aws ec2 create-security-group --group-name test-sg --description "test"
  ```
* **SysAdmin** (launch a test EC2 instance):

  ```bash
  aws ec2 run-instances --image-id ami-XXXX --count 1 --instance-type t3.micro --security-group-ids sg-XXXX
  ```
* **Developer** (attempt ECR login/push — use Docker credentials flow later during pipeline).
* **Scrum Master** (try a describe command, should return OK but not allow destructive actions).

---

## Checkpoint / Validation

* Per-user credential files exist in `${OUTDIR}` for distribution (format exactly):

  ```
  Role:
  Username:
  Password:
  Account ID:
  Access Key:
  Secret Key:
  ```
* All custom policies exist (`aws iam list-policies --scope Local`).
* Instance roles and instance profiles exist:

  ```bash
  aws iam get-role --role-name TechOps_JenkinsRole
  aws iam get-instance-profile --instance-profile-name TechOps_JenkinsInstanceProfile
  aws iam get-role --role-name TechOps_AppRole
  aws iam get-instance-profile --instance-profile-name TechOps_AppInstanceProfile
  ```
* Terraform user keys saved at `${OUTDIR}/techops-terraform-keys.json`. (Instructor must add to Terraform Cloud workspace variables.)
* Each user confirmed by running `aws sts get-caller-identity` with their CLI creds.

---

## Deliverables (to commit / hand to instructor)

* Commit to repo: `infrastructure/iam/policies/*.json` (policy definitions only, **do not** commit any keys/passwords).
* Submit `labs/lab03/output/` directory to instructor **securely** (zipped and shared privately) — includes per-user credential files (or better: instructor distributes them individually).
* `iam-report.md` in `/docs/` listing:

  * Users created & matching roles
  * Policy ARNs (custom TechOps_*)
  * Role ARNs & instance-profile names
  * Confirmation that Terraform keys were added to Terraform Cloud (note only, do not paste keys in report)

---

## Troubleshooting tips

* **`create-login-profile` fails**: user might already have login profile; remove then recreate or reset password in Console.
* **Access key lost**: you cannot retrieve SecretAccessKey after creation — create a new key and delete the old one.
* **User gets AccessDenied on action**: check the policy attached to their user and augment minimally (use CloudTrail / CLI error message to find missing action).
* **Terraform Cloud fails with IAM permissions**: use `terraform plan` failure output to identify missing actions and add them to `TechOps_TerraformPolicy`.
* **Credentials files left on disk**: instruct IAM Engineer to securely delete after distribution (use `shred`/secure delete if required).

---

## Security notes (must-read)

* DO NOT commit keys or passwords to Git. Commit only policy JSONs.
* Store per-user credentials **securely** when distributing (private message, encrypted file).
* Enforce `password-reset-required` on first login (script above sets that).
* Consider rotating Terraform user keys after the lab.
* Consider removing `AdministratorAccess` from human accounts after setup.

---

## Reflection Questions

1. Why do we give `techops-terraform` broader infra permissions while giving humans role-specific, limited permissions?
2. What are the risks of giving every human a programmatic access key, and how would you mitigate them in a production environment?

---

## Next steps (after Lab 03)

* IAM Engineer adds `techops-terraform` keys to Terraform Cloud workspace (Lab 04).
* Architect links GitHub repo to Terraform Cloud (Lab 04).
* Network team begins Lab 05 (Networking with Terraform) using Terraform Cloud execution.

---